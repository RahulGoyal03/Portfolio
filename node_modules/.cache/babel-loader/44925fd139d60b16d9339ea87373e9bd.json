{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Desktop\\\\rahul_portfolio\\\\src\\\\ContextProvider\\\\ThemeContext.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useEffect } from 'react';\nimport { theme } from '../Utils/themes'; // import { currentTime } from '../Utils/Time';\n// const getTheme = () => {\n// \tconst time = currentTime();\n// \tlet mode = '';\n// \tif (time > 18 && time < 6.01) {\n// \t\tmode = 'light';\n// \t} else {\n// \t\tmode = 'dark';\n// \t}\n// \treturn mode;\n// };\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst getMode = JSON.parse(localStorage.getItem('theme')) || 'dark';\nexport const ThemeContext = /*#__PURE__*/createContext();\n\nconst ThemeContextProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [mode, setMode] = React.useState(getMode);\n  const [open, setOpen] = React.useState(true);\n\n  const handleMode = () => {\n    setMode(mode === 'dark' ? 'light' : 'dark');\n  };\n\n  useEffect(() => {\n    localStorage.setItem('theme', JSON.stringify(mode));\n  }, [mode]);\n\n  const handleMenu = () => {\n    setOpen(!open);\n  };\n\n  const newTheme = theme[mode];\n  const value = {\n    mode,\n    newTheme,\n    handleMode,\n    open,\n    handleMenu\n  };\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 3\n  }, this);\n};\n\n_s(ThemeContextProvider, \"lGt/iMJVwPrCcaAGh1kC7F5Ngmc=\");\n\n_c = ThemeContextProvider;\nexport { ThemeContextProvider };\n\nvar _c;\n\n$RefreshReg$(_c, \"ThemeContextProvider\");","map":{"version":3,"sources":["C:/Users/DELL/Desktop/rahul_portfolio/src/ContextProvider/ThemeContext.jsx"],"names":["React","createContext","useEffect","theme","getMode","JSON","parse","localStorage","getItem","ThemeContext","ThemeContextProvider","children","mode","setMode","useState","open","setOpen","handleMode","setItem","stringify","handleMenu","newTheme","value"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,SAA/B,QAAgD,OAAhD;AACA,SAASC,KAAT,QAAsB,iBAAtB,C,CACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAX,KAA6C,MAA7D;AACA,OAAO,MAAMC,YAAY,gBAAGR,aAAa,EAAlC;;AAEP,MAAMS,oBAAoB,GAAG,QAAkB;AAAA;;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AAC9C,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBb,KAAK,CAACc,QAAN,CAAeV,OAAf,CAAxB;AACA,QAAM,CAACW,IAAD,EAAOC,OAAP,IAAkBhB,KAAK,CAACc,QAAN,CAAe,IAAf,CAAxB;;AAEA,QAAMG,UAAU,GAAG,MAAM;AACxBJ,IAAAA,OAAO,CAACD,IAAI,KAAK,MAAT,GAAkB,OAAlB,GAA4B,MAA7B,CAAP;AACA,GAFD;;AAIAV,EAAAA,SAAS,CAAC,MAAM;AACfK,IAAAA,YAAY,CAACW,OAAb,CAAqB,OAArB,EAA8Bb,IAAI,CAACc,SAAL,CAAeP,IAAf,CAA9B;AACA,GAFQ,EAEN,CAACA,IAAD,CAFM,CAAT;;AAGA,QAAMQ,UAAU,GAAG,MAAM;AACxBJ,IAAAA,OAAO,CAAC,CAACD,IAAF,CAAP;AACA,GAFD;;AAIA,QAAMM,QAAQ,GAAGlB,KAAK,CAACS,IAAD,CAAtB;AAEA,QAAMU,KAAK,GAAG;AAAEV,IAAAA,IAAF;AAAQS,IAAAA,QAAR;AAAkBJ,IAAAA,UAAlB;AAA8BF,IAAAA,IAA9B;AAAoCK,IAAAA;AAApC,GAAd;AACA,sBACC,QAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAEE,KAA9B;AAAA,cACEX;AADF;AAAA;AAAA;AAAA;AAAA,UADD;AAKA,CAvBD;;GAAMD,oB;;KAAAA,oB;AAyBN,SAASA,oBAAT","sourcesContent":["import React, { createContext, useEffect } from 'react';\r\nimport { theme } from '../Utils/themes';\r\n// import { currentTime } from '../Utils/Time';\r\n\r\n// const getTheme = () => {\r\n// \tconst time = currentTime();\r\n// \tlet mode = '';\r\n// \tif (time > 18 && time < 6.01) {\r\n// \t\tmode = 'light';\r\n// \t} else {\r\n// \t\tmode = 'dark';\r\n// \t}\r\n// \treturn mode;\r\n// };\r\nconst getMode = JSON.parse(localStorage.getItem('theme')) || 'dark';\r\nexport const ThemeContext = createContext();\r\n\r\nconst ThemeContextProvider = ({ children }) => {\r\n\tconst [mode, setMode] = React.useState(getMode);\r\n\tconst [open, setOpen] = React.useState(true);\r\n\r\n\tconst handleMode = () => {\r\n\t\tsetMode(mode === 'dark' ? 'light' : 'dark');\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\tlocalStorage.setItem('theme', JSON.stringify(mode));\r\n\t}, [mode]);\r\n\tconst handleMenu = () => {\r\n\t\tsetOpen(!open);\r\n\t};\r\n\r\n\tconst newTheme = theme[mode];\r\n\r\n\tconst value = { mode, newTheme, handleMode, open, handleMenu };\r\n\treturn (\r\n\t\t<ThemeContext.Provider value={value}>\r\n\t\t\t{children}\r\n\t\t</ThemeContext.Provider>\r\n\t);\r\n};\r\n\r\nexport { ThemeContextProvider };\r\n"]},"metadata":{},"sourceType":"module"}